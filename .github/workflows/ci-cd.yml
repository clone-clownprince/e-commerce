name: Flask CI/CD Workflow

on:
  push:
    branches:
      - main  # Trigger the workflow when code is pushed to the main branch

jobs:
  build:
    runs-on: self-hosted  # Run the job on an Ubuntu runner
    
    steps:
    - name: Check out code
      uses: actions/checkout@v3  # Checkout the code from the repository

    - name: Set up Python environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'  # Specify the Python version to use

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt  # Install the dependencies

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-json:latest .  # Build Docker image

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/flask-json:latest  # Push Docker image

  test:
    runs-on: self-hosted
    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'

      # Cache Python dependencies
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run tests
      - name: Run Tests
        run: |
          pytest tests/

  deploy:
    runs-on: self-hosted
    needs: build

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Set KUBECONFIG from secrets
      - name: Set KUBECONFIG
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=$(pwd)/kubeconfig

      # Test kubectl connection
      - name: Test kubectl connection
        run: kubectl cluster-info

      # Deploy to Kubernetes Cluster
      - name: Deploy to Kubernetes Cluster
        run: |
          kubectl apply -f ./k8s/deployment.yaml
          kubectl apply -f ./k8s/service.yaml
