name: E-Commerce CI/CD Workflow

on:
  push:
    branches:
      - main  # Trigger the workflow when code is pushed to the main branch

jobs:
  build-and-deploy:
    runs-on: self-hosted  # Run the job on an Ubuntu runner
    
    steps:
    - name: Check out code
      uses: actions/checkout@v3  # Checkout the code from the repository

    - name: Install dependencies
      run: |
        python3 -m venv venv-env  # Create the virtual environment in a separate folder
        source venv-env/bin/activate
        python3 --version  # Ensure the correct version of Python is used
        pip install --upgrade pip
        pip install -r requirements.txt  # Install the dependencies

    - name: Build Docker image
      run: |
        source venv-env/bin/activate  # Ensure the virtual environment is activated
        docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce:latest .  # Build Docker image

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push Docker image to Docker Hub
      run: |
        source venv-env/bin/activate  # Ensure the virtual environment is activated
        docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce:latest  # Push Docker image

    - name: Set up K3s cluster
      run: |
        curl -sfL https://get.k3s.io | sh -  # Install K3s
        # Ensure kubectl symlink does not already exist
        if [ ! -f /usr/local/bin/kubectl ]; then
            sudo ln -s /usr/local/bin/k3s /usr/local/bin/kubectl
        fi
        
        # Wait for K3s to be ready
        sleep 10
        
        kubectl apply -f k8s/deployment.yaml  # Deploy Kubernetes resources
        kubectl apply -f k8s/service.yaml

    - name: Get service URL
      id: get_url  # Reference this step later
      run: |
        # Get the external IP and NodePort for the service
        NODE_IP=$(hostname -I | awk '{print $1}')
        NODE_PORT=$(kubectl get svc ecommerce-service -o jsonpath='{.spec.ports[0].nodePort}')
        
        # Form the service URL
        SERVICE_URL="http://$NODE_IP:$NODE_PORT"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV  # Persist service URL for later steps

    - name: Wait for service availability
      run: |
        # Ensure SERVICE_URL is available
        if [ -z "$SERVICE_URL" ]; then
          echo "SERVICE_URL not set. Exiting."
          exit 1
        fi
        
        # Wait for the service to be available
        until curl --silent --fail $SERVICE_URL; do
          echo "Waiting for service..."
          sleep 5
        done

    - name: Test the application
      run: |
        echo "Testing app at $SERVICE_URL"
        curl -v $SERVICE_URL  # Verbose curl to verify the app is working

    - name: Clean up Docker and Kubernetes resources
      run: |
        docker system prune -af  # Clean up Docker
        kubectl delete -f k8s/deployment.yaml  # Remove Kubernetes resources after testing
